 Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('role')->default('student');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });


Schema::create('year_levels', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->timestamps();
        });

 Schema::create('sections', function (Blueprint $table) {
            $table->id();
            $table->foreignId('year_level_id')->constrained()->onDelete('cascade');
            $table->string('name');
            $table->timestamps();
        });

Schema::create('subjects', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->foreignId('year_level_id')->constrained()->onDelete('cascade');
            $table->foreignId('section_id')->nullable()->constrained()->onDelete('cascade');
            $table->timestamps();
        });

Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('year_level_id')->constrained('year_levels')->onDelete('cascade');
            $table->foreignId('section_id')->nullable()->constrained()->onDelete('cascade');
            $table->foreignId('subject_id')->constrained('subjects')->onDelete('cascade');
            $table->timestamps();
        });

Schema::create('modules', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->foreignId('year_level_id')->constrained()->onDelete('cascade');
            $table->foreignId('section_id')->nullable()->constrained()->onDelete('cascade');
            $table->foreignId('subject_id')->constrained()->onDelete('cascade');
            $table->timestamps();
        });


Schema::create('materials', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('description')->nullable();
            $table->string('type')->default('material');
            $table->string('file_path');
            $table->foreignId('module_id')->nullable()->constrained()->cascadeOnDelete();
            $table->foreignId('year_level_id')->constrained()->cascadeOnDelete();
            $table->foreignId('section_id')->constrained()->cascadeOnDelete();
            $table->foreignId('subject_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete(); // uploader
            $table->timestamps();
        });

Schema::create('activities', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->enum('type', ['quiz', 'exam', 'essay']);
            $table->foreignId('module_id')->constrained()->cascadeOnDelete();
            $table->text('description')->nullable();
            $table->dateTime('scheduled_at');
            $table->dateTime('due_date')->nullable();
            $table->timestamps();
        });
Schema::create('questions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('activity_id')->constrained()->onDelete('cascade');
            $table->text('question');
            $table->string('type');
            $table->json('options')->nullable();
            $table->string('answer_key')->nullable();
            $table->timestamps();
        });
Schema::create('student_answers', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('activity_id')->constrained()->onDelete('cascade');
            $table->foreignId('question_id')->constrained()->onDelete('cascade');
            $table->text('answer')->nullable();
            $table->boolean('is_correct')->nullable();
            $table->integer('score')->default(0);
            $table->timestamps();
        });
 Schema::create('student_quiz_results', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('activity_id')->constrained()->onDelete('cascade');
            $table->integer('score');
            $table->integer('total_points');
            $table->timestamps();
        });
Schema::create('teacher_assignments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade'); // teacher
            $table->foreignId('year_level_id')->constrained()->onDelete('cascade');
            $table->foreignId('section_id')->nullable()->constrained()->onDelete('cascade');
            $table->foreignId('subject_id')->constrained()->onDelete('cascade');
            $table->timestamps();
        });
Schema::create('submissions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('activity_id')->constrained()->onDelete('cascade');
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->text('content')->nullable();
            $table->string('file_path')->nullable();
            $table->integer('score')->nullable();
            $table->string('graded')->default('Not Graded');
            $table->timestamps();
        });

 Schema::create('lesson_plan_comments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('material_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->text('comment');
            $table->timestamps();
        });

Schema::create('notifications', function (Blueprint $table) {
            $table->uuid('id')->primary();
            $table->string('type');
            $table->morphs('notifiable');
            $table->text('data');
            $table->timestamp('read_at')->nullable();
            $table->timestamps();
        });



Schema::create('proficiency_tests', function (Blueprint $table) {
    $table->id();
        $table->string('title');
    $table->enum('type', ['reading', 'numerical']);
    $table->foreignId('year_level_id')->constrained()->onDelete('cascade');
    $table->text('description')->nullable();
    $table->timestamp('scheduled_at');
    $table->timestamp('due_date')->nullable();
    $table->timestamps();
});


Schema::create('proficiency_questions', function (Blueprint $table) {
            $table->id();
             $table->foreignId('proficiency_test_id')->constrained()->onDelete('cascade');
            $table->string('question');
            $table->enum('type', ['multiple_choice', 'checkboxes', 'true_false', 'essay', 'fill_in_blank']);
            $table->json('options')->nullable();
            $table->json('answer_key')->nullable();
            $table->timestamps();
        });

 Schema::create('student_proficiency_answers', function (Blueprint $table) {
            $table->id();
              $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('proficiency_test_id')->constrained()->onDelete('cascade');
            $table->foreignId('question_id')->constrained('proficiency_questions')->onDelete('cascade');
            $table->text('answer')->nullable();
            $table->boolean('is_correct')->nullable();
            $table->integer('score')->default(0);
            $table->timestamps();
        });

Schema::create('student_proficiency_results', function (Blueprint $table) {
    $table->id();
    $table->foreignId('user_id')->constrained()->onDelete('cascade');
    $table->foreignId('proficiency_test_id')->constrained()->onDelete('cascade');
    $table->integer('score');
    $table->integer('total_points');
    $table->timestamps();
});



import { computed, ref, watch } from 'vue';

const isLoading = computed(() => isCreating.value || isUpdating.value || isDeleting.value);
const isCreating = ref(false);
const isUpdating = ref(false);
const isDeleting = ref(false);
// const showFlash = ref(false);



const createYearLevel = () => {
    isCreating.value = true;
    createForm.post('/year-levels', {
        onSuccess: () => {
            showAddModal.value = false;
            createForm.reset();
        },
        onFinish: () => {
            setTimeout(() => {
                isCreating.value = false;
            }, 2000);
        },
    });
};

const updateYearLevel = () => {
    if (editForm.id) {
        isUpdating.value = true;
        editForm.put(`/year-levels/${editForm.id}`, {
            onSuccess: () => {
                showEditModal.value = false;
            },
            onFinish: () => {
                setTimeout(() => {
                    isUpdating.value = false;
                }, 2000);
            },
        });
    }
};

const deleteYearLevel = () => {
    if (deleteId.value !== null) {
        isDeleting.value = true;
        router.delete(`/year-levels/${deleteId.value}`, {
            onSuccess: () => {
                deleteId.value = null;
                showDeleteModal.value = false;
            },
            onFinish: () => {
                setTimeout(() => {
                    isDeleting.value = false;
                }, 2000);
            },
        });
    }
};

<div v-if="isLoading" class="fixed inset-0 z-50 flex items-center justify-center bg-white/30 backdrop-blur-sm">
    <div class="flex flex-col items-center gap-4">
        <div class="relative h-16 w-16">
            <div class="animate-spin-slow-cw absolute inset-0 rounded-full border-4 border-blue-600 border-t-transparent"></div>

            <div class="animate-spin-slow-ccw absolute inset-2 rounded-full border-4 border-yellow-400 border-t-transparent"></div>

            <div class="animate-spin-fast-cw absolute inset-4 rounded-full border-4 border-pink-500 border-t-transparent"></div>
        </div>

        <div class="text-center">
            <span class="block animate-pulse text-base font-semibold text-[#01006c]">Processing Request...</span>
            <span class="text-xs text-[#01006c]/70">This may take a moment</span>
        </div>
    </div>
</div>


<style scoped>
@keyframes spin-cw {
    to {
        transform: rotate(360deg);
    }
}

@keyframes spin-ccw {
    to {
        transform: rotate(-360deg);
    }
}

.animate-spin-slow-cw {
    animation: spin-cw 2s linear infinite;
}

.animate-spin-slow-ccw {
    animation: spin-ccw 3s linear infinite;
}

.animate-spin-fast-cw {
    animation: spin-cw 1s linear infinite;
}
</style>
